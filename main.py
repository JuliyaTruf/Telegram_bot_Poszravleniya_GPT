import os
from pathlib import Path

import openai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import logging
from dotenv import load_dotenv

#–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BASE_DIR = Path(__file__).resolve().parent
load_dotenv(BASE_DIR / '.env')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API
openai.api_key = os.getenv("API_GPT")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à OpenAI API –∫–ª—é—á
openai.api_base = "https://api.proxyapi.ru/openai/v1"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data_storage = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data_storage[user_id] = {
        'username': update.effective_user.username,
        'congratulations_count': 0,
        'name': None,
        'congratulation_type': None,
        'male': False,
        'female': False,
        'informal': False,
        'formal': False,
        'short': False,
        'medium': False,
        'long': False
    }

    keyboard = [
        [InlineKeyboardButton("–ü–æ–∂–µ–ª–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üåû", callback_data='good_day')],
        [InlineKeyboardButton("–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è üéÇ", callback_data='birthday')],
        [InlineKeyboardButton("2Ô∏è‚É£3Ô∏è‚É£ —Ñ–µ–≤—Ä–∞–ª—è ü™ñ", callback_data='february_23')],
        [InlineKeyboardButton("8 –º–∞—Ä—Ç–∞ üíê", callback_data='march_8')],
        [InlineKeyboardButton("–ù–æ–≤—ã–π –≥–æ–¥ üéá", callback_data='new_year')],
        [InlineKeyboardButton("–†–æ–∂–¥–µ—Å—Ç–≤–æ üéÑ", callback_data='christmas')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if update.message:
        await update.message.reply_text('üå† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:', reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text('üå† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:', reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
async def choose_congratulation_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    user_data_storage[user_id]['congratulation_type'] = query.data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
    await query.answer()

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ü–æ–∂–µ–ª–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è", —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏–µ
    if query.data == 'good_day':
        await generate_good_day_wish(update, context)
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
        await show_congratulation_params(update, context)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è
async def generate_good_day_wish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ —á–∞—Ç-–º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç v1/chat/completions
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –ß–∞—Ç-–º–æ–¥–µ–ª—å
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."},  # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–¥–∞—é—â–µ–µ —Å—Ç–∏–ª—å
                {"role": "user",
                 "content": "–°–æ–∑–¥–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è. –¢—ã –Ω–µ –æ–±—â–∞–µ—à—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–¥–∞–µ—à—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—ã —É—á–∏—Ç—ã–≤–∞–µ—à—å, —á—Ç–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—ã/–≤—ã, –∂–µ–Ω—â–∏–Ω–µ/–º—É–∂—á–∏–Ω–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–º, —É—á–∏—Ç—ã–≤–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ "}
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ],
            max_tokens=150
        )
        good_day_wish = response['choices'][0]['message']['content'].strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {e}")
        good_day_wish = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {e}"

    keyboard = [
        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ", callback_data='next_good_day')],
        [InlineKeyboardButton("–ù–æ–≤–æ–µ", callback_data='new')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.edit_message_text(
            f"–ü–æ–∂–µ–ª–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è:\n{good_day_wish}",
            reply_markup=reply_markup)
    else:
        await update.message.reply_text(
            f"–ü–æ–∂–µ–ª–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è:\n{good_day_wish}",
            reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫
async def show_congratulation_params(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = user_data_storage[user_id]

    name = user_data.get('name', None)
    name_button = f"–ò–º—è: {name}" if name else "–î–æ–±–∞–≤–∏—Ç—å –∏–º—è"

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–µ–ª—ë–Ω–æ–≥–æ –∫—Ä—É–∂–∫–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    def format_button(text, selected):
        return f"{'‚úÖ ' if selected else '‚óΩÔ∏è'}{text}"

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–∞–∫, —á—Ç–æ–±—ã –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä
    keyboard = [
        [InlineKeyboardButton(name_button, callback_data='add_name')],
        [
            InlineKeyboardButton(format_button("–ú—É–∂—á–∏–Ω–µ", user_data.get('male', False)), callback_data='male'),
            InlineKeyboardButton(format_button("–ñ–µ–Ω—â–∏–Ω–µ", user_data.get('female', False)), callback_data='female')
        ],
        [
            InlineKeyboardButton(format_button("–¢—ã", user_data.get('informal', False)), callback_data='informal'),
            InlineKeyboardButton(format_button("–í—ã", user_data.get('formal', False)), callback_data='formal')
        ],
        [
            InlineKeyboardButton(format_button("–ö–æ—Ä–æ—Ç–∫–æ–µ", user_data.get('short', False)), callback_data='short'),
            InlineKeyboardButton(format_button("–°—Ä–µ–¥–Ω–µ–µ", user_data.get('medium', False)), callback_data='medium'),
            InlineKeyboardButton(format_button("–î–ª–∏–Ω–Ω–æ–µ", user_data.get('long', False)), callback_data='long')
        ],
        [InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data='generate')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ callback –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.edit_message_text('üéá –£—Ç–æ—á–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:', reply_markup=reply_markup)
    else:
        await update.message.reply_text('üéá –£—Ç–æ—á–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:', reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
async def choose_congratulation_params(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    await query.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    if query.data == 'add_name':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º:")
        user_data_storage[user_id]['awaiting_name'] = True
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ–ª, —Å—Ç–∏–ª—å –æ–±—Ä–∞—â–µ–Ω–∏—è, –¥–ª–∏–Ω–∞)
    if query.data == 'male':
        user_data_storage[user_id]['male'] = True
        user_data_storage[user_id]['female'] = False
    elif query.data == 'female':
        user_data_storage[user_id]['female'] = True
        user_data_storage[user_id]['male'] = False
    elif query.data == 'informal':
        user_data_storage[user_id]['informal'] = True
        user_data_storage[user_id]['formal'] = False
    elif query.data == 'formal':
        user_data_storage[user_id]['formal'] = True
        user_data_storage[user_id]['informal'] = False
    elif query.data == 'short':
        user_data_storage[user_id]['short'] = True
        user_data_storage[user_id]['medium'] = False
        user_data_storage[user_id]['long'] = False
    elif query.data == 'medium':
        user_data_storage[user_id]['medium'] = True
        user_data_storage[user_id]['short'] = False
        user_data_storage[user_id]['long'] = False
    elif query.data == 'long':
        user_data_storage[user_id]['long'] = True
        user_data_storage[user_id]['short'] = False
        user_data_storage[user_id]['medium'] = False
    elif query.data == 'generate':
        await generate_congratulation(update, context)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤—ã–±–æ—Ä–∞
    await show_congratulation_params(update, context)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
async def set_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = user_data_storage.get(user_id, {})
    if user_data.get('awaiting_name', False):
        name = update.message.text
        user_data_storage[user_id]['name'] = name
        user_data_storage[user_id]['awaiting_name'] = False
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        await show_congratulation_params(update, context)
    else:
        pass  # –ï—Å–ª–∏ –º—ã –Ω–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏, –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI
async def generate_congratulation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = user_data_storage[user_id]

    name = user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    congratulation_type = user_data.get('congratulation_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª
    if user_data.get('male'):
        gender = '–º—É–∂—á–∏–Ω–µ'
    elif user_data.get('female'):
        gender = '–∂–µ–Ω—â–∏–Ω–µ'
    else:
        gender = '—á–µ–ª–æ–≤–µ–∫—É'

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –æ–±—Ä–∞—â–µ–Ω–∏—è
    if user_data.get('informal'):
        style = '–Ω–∞ —Ç—ã'
    elif user_data.get('formal'):
        style = '–Ω–∞ –≤—ã'
    else:
        style = ''

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_data.get('short'):
        length = '–∫–æ—Ä–æ—Ç–∫–æ–µ'
        max_length = 150  # –ú–∞–∫—Å–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    elif user_data.get('medium'):
        length = '—Å—Ä–µ–¥–Ω–µ–µ'
        max_length = 250  # –ú–∞–∫—Å–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    else:
        length = '–¥–ª–∏–Ω–Ω–æ–µ'
        max_length = 350  # –ú–∞–∫—Å–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
    prompt = (
        f"–°–æ–∑–¥–∞–π {length} –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º {congratulation_type} –¥–ª—è {gender}, –æ–±—Ä–∞—â–µ–Ω–∏–µ {style}."
        f"–ò–º—è: {name}. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å {max_length} —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º."
        f"//1. –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –ª–æ–≥–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –º—ã—Å–ª—å—é."
        f"//2. –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {max_length}, —É–∫–æ—Ä–æ—Ç–∏ —Ç–µ–∫—Å—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –º—ã—Å–ª—å –æ—Å—Ç–∞–ª–∞—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π. "
        f"//3. –ó–ê–ü–†–ï–©–ï–ù–û –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –¥–æ–±–∞–≤—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º—ã—Å–ª–∏. "
        f"//4. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} –¥–æ–ª–∂–Ω–æ —Å–∫–ª–æ–Ω—è—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."
        f"//5. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π {style} –∏ {gender} –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!"
        f"//6. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–µ–ª –∏–º—è {name}, —Ç–æ —Ç—ã —Ñ–æ—Ä–º–∏—Ä—É–µ—à—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, —É—á–∏—Ç—ã–≤–∞—è {gender}, –Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—è –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç–µ."
        f"//7. –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ª–æ–≥–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
    )

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Ç-–º–æ–¥–µ–ª—å
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=250
        )
        congratulation_text = response['choices'][0]['message']['content'].strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        congratulation_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {e}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    keyboard = [
        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ", callback_data='next')],
        [InlineKeyboardButton("–ù–æ–≤–æ–µ", callback_data='new')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ —ç–º–æ–¥–∑–∏
    congratulation_mapping = {
        'march_8': ("8 –º–∞—Ä—Ç–∞ üíê", "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º"),
        'good_day': ("–ü–æ–∂–µ–ª–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üåû", "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ"),
        'birthday': ("–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è üéÇ", "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º"),
        'february_23': ("2Ô∏è‚É£3Ô∏è‚É£ —Ñ–µ–≤—Ä–∞–ª—è ü™ñ", "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º"),
        'new_year': ("–ù–æ–≤—ã–π –≥–æ–¥ üéá", "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º"),
        'christmas': ("–†–æ–∂–¥–µ—Å—Ç–≤–æ üéÑ", "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º"),
    }

    title, message = congratulation_mapping.get(congratulation_type, ("–ü—Ä–∞–∑–¥–Ω–∏–∫", "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ"))

    if update.callback_query:
        await update.callback_query.edit_message_text(
            f"{message}\n{title}:\n{congratulation_text}",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            f"{message}\n{title}:\n{congratulation_text}",
            reply_markup=reply_markup
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ "–°–ª–µ–¥—É—é—â–µ–µ" –∏ "–ù–æ–≤–æ–µ"
async def handle_next_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    await query.answer()

    if query.data == 'next':
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é generate_congratulation —Å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        await generate_congratulation(update, context)
    elif query.data == 'next_good_day':
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è
        await generate_good_day_wish(update, context)
    elif query.data == 'new':
        await start(update, context)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == '__main__':
    application = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram Bot Token

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(choose_congratulation_type,
                                                 pattern='^(good_day|birthday|february_23|march_8|new_year|christmas)$'))
    application.add_handler(CallbackQueryHandler(choose_congratulation_params,
                                                 pattern='^(male|female|informal|formal|short|medium|long|add_name|generate)$'))
    application.add_handler(CallbackQueryHandler(handle_next_new, pattern='^(next|new|next_good_day)$'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_name))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()
